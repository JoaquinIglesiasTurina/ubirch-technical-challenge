* Introduction
This repo provides an answer for the Ubirch backend technical challenge.
I'll let you decide whether that answer is correct.

* Running the code

=Docker= and =sbt= are required to run the code.
All commands here are run on the project's root directory.

There is a =docker-compose.yml= file on the root directory.
It handles the containerized =Kafka= instance, which can be instantiated
by running the following command.
#+begin_src bash
  docker-compose up
#+end_src

The following command actually runs the code.
You might need to run it on a different terminal than the previous one,
or do some ampersand shenanigans.
#+begin_src bash
  sbt run
#+end_src
And then you always have the option of running the code
through your favorite IDE.

* Answering the challenge questions

** What assumptions do you have to make? if any.
** How would you solve this challenge?
I would not. I would exploit that question number 7 was asked.
Then proceed to solve a simpler problem, where I have more expertise
and allows me to tinker with Kafka and Event Driven Architecture. ;)
** How would you classify this problem?
This is a distributed coordination problem. Or so I've read on the Internet.
** What technique would you apply in order to accomplish this goal?
A distributed lock.
** What technologies would you suggest to use?
Kafka, Zookeeper and Redis have facilities to model this kind of problem.
** How would you model it based on the current view?

** Could you suggest an alternative model view as presented above to fix this issue?

** Could you suggest a way to test the data consistency?
Merkele trees could be used to provide cryptographical guarantees for data consistency.
Each step of the computation could be modeled as a node of the tree.

I've learnt about this while scouring Github for a cheat on this challenge.
I hope there is bonus points for honesty.
** Could you write a simple program were external tools are mocked, you use tasks schedulers to model the background processes and put it on Github.
You are looking at it.

* Code walk through

